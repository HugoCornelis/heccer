-*- outline -*-

* Compiling and Installing

** What are the basics of installing ?
In the Heccer source directory (with the file 'heccer.c'), type
'./configure', 'make', 'make check', 'make install'.  Note: if you
want to uninstall, do 'make uninstall'.

Next, point your webbrowser to 'tests/html/index.html'.  This is a
specification of the tests, and contains raw examples how Heccer to
run a model (for examples how to instantiate Heccer from a Neurospaces
model, see the SSP package).

** What are the dependencies ?
*** perl modules
Contact your sysadmin, or do something like 'su -', 'perl -MCPAN
-e'install <module-name>'.  The perl prerequisites are (besides their
binary backends) :

**** perl -MCPAN -e'install PAR::Dist;' (Module::Signature)
**** perl -MCPAN -e'install Module::Signature;' (Bundle::CPAN)
**** perl -MCPAN -e'install Digest::SHA' (Bundle::CPAN)
**** perl -MCPAN -e'install IO::Zlib;' (Bundle::CPAN)
**** perl -MCPAN -e'install ExtUtils::CBuilder;' (ExtUtils::ParseXS)
**** perl -MCPAN -e'install ExtUtils::ParseXS;' (Enable C_support for Module::Build)
**** perl -MCPAN -e'install Test::Spiffy' (Test::Base)
**** perl -MCPAN -e'install Test::More' (Test::Base)
**** perl -MCPAN -e'install Test::Base' (YAML)
**** perl -MCPAN -e'install YAML'

**** perl -MCPAN -e'install IO::Pty (Expect)
**** perl -MCPAN -e'install IO::Tty (Expect)
**** perl -MCPAN -e'install Expect' (Expect::Simple)
**** perl -MCPAN -e'install Expect::Simple'
**** perl -MCPAN -e'install Parse::RecDescent' (Inline, for Inline::C)
**** perl -MCPAN -e'install Inline'
**** perl -MCPAN -e'install HTML::QuickTable'
**** perl -MCPAN -e'install HTML::Template'
**** perl -MCPAN -e'install HTML::Table'
**** perl -MCPAN -e'install Clone'
**** perl -MCPAN -e'install Number::Compare' (File::Find::Rule)
**** perl -MCPAN -e'install File::Find::Rule'

Note that some Linux distros come with some of these installed, or
have prebuilt packages, some don't.  Also you probably need a
'~/.gnupg' directory.

*** for rhel4
You have to add '-lncurses' just before '-lhistory' (space separated).
in the Makefile for building the swig perl glue.

*** for ubuntu 
The following packages below can be used:

perl clone
perl yaml
perl expect
perl file find rule
perl digest sha (not sha1)


* model running
** use custom written scripts in perl
See the perl tests for examples.
** use custom written code in C.
See the C tests for examples.

** additionally
Also see the website, which contains the htmlified source code,
including the test cases.

* model debugging
** the membrane potential becomes inf or nan
Mostly due to a to large time step, or sometimes due to bad initial
values.
*** produce output in verbose manner, pipe it throug the 'less' pager.
*** Look in the disassembled output for inf and nan.
Should give a fairly good clue for what model component is responsible
for the first occurence of inf/nan.
*** Figure out if the offending values comes from initialization or from calculations
Look for "Iteration" lines.
**** No Iteration lines
If there is no iteration line before the
first occurence of the offending value, the problem is with the
initial values.
**** Iteration lines
***** Oscillation
Check if this is an oscillation.  If so, decrease the time step and
try again.
***** No Oscillation
The only reason that I have seen so far is an initial value out of the
physiological range.  A notorious example is a current injection of 1A
(although in that case you would still see an oscillation of two
simulation steps or so).

* How to add new maths to heccer ?
There are two ways to do this: adding new equation solvers using
call-outs, or extending the byte code generator and emulator.  In the
near future, it will also be possible to add new solvers using the
internal addressing mechanism of Heccer.  This mechanism gives other
solvers direct access to Heccer's internal fields (so it is obviously
very fast).

** Using call-outs
See the example on the call-out that computes a conductance
(tests/code/callout1.c and tests/code/calloutInjector.c)

** How to add new components to the compiler ?
*** Step 1
Add C structures that describe the new components in the intermediary.
*** Mathematical Structure of the new Components
Preferably using array indices, e.g. iParent of struct Compartment.
**** Descriptive and Initial Values
Just double fields, sentinel values can be used to indicate special
conditions, e.g. DOUBLE_MAX for a maximal conductance could mean that
a learning rule changes the maximal conductance.

*** Step 2
Extend the compiler such that it understands the new C structures of
the intermediary.  The extended compiler produces new or existing byte
codes to solve the new components.
**** Indexers
For optimization, eg. channels are sorted according to their reversal
potential.
**** Byte code

*** Step 3
Extend the virtual machine such that it understands the new byte
codes.

*** Step 4
Make the solved variables accessible.

* How to link Heccer to something else ?
Heccer can be linked to external code at two levels: at C level, and
at swig level.  In both cases, examine the files in glue/swig/perl/ to
know what the interface is, and how it is supposed to be used.

* How to link matlab to Heccer ?
No clue, but should not be to difficult.  The key is to instantiate an
intermediary somehow, check the source intermediary.h and the passive
tests, e.g. tests/code/c1c2p1.c.

