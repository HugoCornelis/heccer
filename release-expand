#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb
##
##############################################################################
##'
##' Insert labels in a set of files.
##'
##' Copyright (C) 2006-2007 Hugo Cornelis, hugo.cornelis@gmail.com
##'
##############################################################################


use strict;


use Getopt::Long;


# parse options

my $option_help;
my $option_remove;
my $option_verbose;

sub read_cmd_line
{
    my $result
	= GetOptions
	    (
	     "help!" => \$option_help,
	     "r|remove!" => \$option_remove,
	     "v|verbose+" => \$option_verbose,
	    );

    if ($option_help)
    {
	print
	    "
$0: insert labels in a set of files.

options :
    help            print usage information.
    remove          remove labels instead of insert.
    verbose         set verbosity level.
";

	exit 1;
    }

}

read_cmd_line();

# read config

my $config = do './release-expand.config';

# get the package info

my $package = $ARGV[0] || '';
my $major = $ARGV[1] || '';
my $minor = $ARGV[2] || '';
my $micro = $ARGV[3] || '';
my $label = $ARGV[4] || '';
my $email = $ARGV[5] || '';

# set default keyword values

$config->{labels}->{package} = $package;
$config->{labels}->{major} = $major;
$config->{labels}->{minor} = $minor;
$config->{labels}->{micro} = $micro;
$config->{labels}->{label} = $label;
$config->{labels}->{email} = $email;

# loop over all files with keywords

my $files = $config->{files};

foreach my $file (@$files)
{
    my $content;

    {
	# slurp content

	open my $descriptor, $file
	    or die $!;
	undef $/;
	$content = <$descriptor>;
	close $descriptor;
    }

    if ($content)
    {
	my $old_content = $content;

	# loop over source text

	while ($content =~ m/\G.*?\$Format: "([^\n]*)"\$/gs)
	{
	    my $position = pos($content);

	    # get matched string

	    my $matched = $1;

	    # if need to remove labels

	    if ($option_remove)
	    {
		$matched = '';
	    }

	    # else insert labels

	    else
	    {
		# check if info is available

		foreach my $info (keys %{$config->{labels}})
		{
		    if ($matched =~ /\$\{$info\}/
			&& !defined $config->{labels}->{$info})
		    {
			die "$0: '$info' keyword for file '$file' required but not defined";
		    }
		}

		# replace quotes

		#! not sure about quoting, probably not all cases covered.

		$matched =~ s/\\"/"/g;

		# replace variables

		foreach my $info (keys %{$config->{labels}})
		{
		    $matched =~ s/\$\{$info\}/$config->{labels}->{$info}/g;
		}
	    }

	    # replace the next line with the new text

	    $content =~ s/\G(.*\n).*\n/$1$matched\n/;

	    pos($content) = $position;
	}

	# if something has changed

	if ($old_content ne $content)
	{
	    # replace the file

	    open my $descriptor, ">$file"
		or die $!;
	    print $descriptor $content;
	    close $descriptor;
	}
    }
}


__END__

=head1 NAME

release-expand - expand keywords before building a release distribution.

=head1 SYNOPSIS

    release-expand [ options ] <package> <major> <minor> <micro> <label> <email>

=head1 DESCRIPTION

release-expand is a keyword expander for arbitrary source code.

It is intended to be used before building a distribution, to expand
keywords, and optionally before a commit to a repository under version
control, to remove keywords.  The advantage is that it is programming
language independent, and allows for user extension.  The idea is
taken from the user extensible keyword expansion mechanism that was
implemented in the prcs version control system.

=head1 USAGE

=over 4

=item Source file keywords

In your source files, insert text of the following form, possibly in
comments:

$Format:<text-with-keywords>$

The keywords have the format ${keyword-name}, the rest of the text is
arbitrary, but starts and ends with a dollar sign.

=item Specifying your keywords

By default the following keywords are known:

package
major
minor
micro
label
email

There is an implicit assumption that the 'label' keyword is a
concatenation of 'major', 'minor', and 'micro', with dashes in
between.

Additional keywords can be added in the config file if needed.  Beware
that at the time of writing, these additional keywords can not be
overriden from the command line.

=item Specifying your source files

Not all files are checked for keyword expansion.  The files that need
keyword expansion must be specified in the config file.

=item Config file

The config file is named 'release-expand.config' and is found in the
current directory.  It has the following format:

 #!/usr/bin/perl -w
 my $config
     = {
        files => [
 		 './configure.ac',
 		 './heccer.c',
 		 './glue/configure.ac',
 		 './glue/swig/perl/configure.ac',
 		 './test-dist',
 		 './tests/code/configure.ac',
 		 './tests/library/version.t',
 		],
        labels => {
 		  package => '',
 		  major => '',
 		  minor => '',
 		  micro => '',
 		  label => '',
 		  email => '',
 		 },
       };
 return $config;


The files section enumerates the files for which keyword expansion is
needed.  The labels section enumerates the keywords and their values.

You can add custom keywords, e.g.

       labels => {
		  website => 'http://www.neurospaces.org',
                  optimization => '-O2',
		 },

The values of the default keywords are replaced by the command line
arguments before the expansion algorithm starts.

=item How keyword expansion works

All the files enumarated in the config file, are checked for occurence
of the sequence '$Format: ... $'.  This sequence must occur on one
single line in the source file.

The expansion algorithm will replace the next full line in the file
with the text after the colon, with keywords expanded as appropriate.

=item An example

In a C source file, you have the comment:

    // $Format: "    static char *pcVersion=\"${label}\";"$

and you use the following command line:

 ./release-expand neurospaces 1 10 pre-release 1-10-pre-release 'hugo\.cornelis\@gmail\.com'

On expansion the line, following this comment line will expand to:

    static char *pcVersion="1-10-pre-release";

In your configure.ac file, you have the line:

# $Format: "AM_INIT_AUTOMAKE(${package}, ${label})"$

Again using the command line from above, this would give:

AM_INIT_AUTOMAKE(neurospaces, 1-10-pre-release)


=head1 OPTIONS

Following options are supported:

=over 4

=item -v, --verbose

Verbose, does not do anything for now.

=item -h, --help

Give help page.

=item -r, --remove

Remove keyword expansions, and replace them with an empty line.  Use
this before checkin in a version control repository, to avoid
generating artificial differences between different versions of your
code.  This avoid merge conflicts.

=back

=head1 BUGS

Mixing different quoting styles can probably give problems.

=head1 SEE ALSO

prcs(1)

=head1 AUTHOR

Hugo Cornelis <hugo.cornelis@gmail.com>

=head1 COPYRIGHT

Copyright (c) 2007. Hugo Cornelis. All rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

See L<http://www.perl.com/perl/misc/Artistic.html>

=cut
