#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb -w
#
##
## Heccer : a compartmental solver that implements efficient Crank-Nicolson
## integration for neuronal models.
##

##############################################################################
##'
##' Heccer : testbed C implementation
##'
##' Copyright (C) 2006-2007 Hugo Cornelis
##'
##' functional ideas ..	Hugo Cornelis, hugo.cornelis@gmail.com
##'
##' coding ............	Hugo Cornelis, hugo.cornelis@gmail.com
##'
##############################################################################



use strict;


$| = 1;


BEGIN
{
    # during tests

    push @INC, '../../glue/swig/perl';

    # after installation

    push @INC, '/usr/local/glue/swig/perl';
}


$SIG{__DIE__}
    = sub {
	use Carp;

	confess @_;
    };


use Data::Dumper;

use Heccer;

use SwiggableHeccer;


my $compartments
    = [
       Heccer::Compartment->new
       (
	{
	 dCm => 4.57537e-11,
	 dEm => -0.08,
	 dInitVm => -0.068,
	 dInject => 0,
	 dRa => 360502,
	 dRm => 3.58441e+08,
	 iParent => -1,
	},
       ),
      ];

my $intermediary
    = Heccer::Intermediary->new
    (
     {
      comp2mech => [ 0, -1],
      compartments => $compartments,
      iCompartments => 1,
     },
    );

# instantiate a heccer with an initialized intermediary

my $heccer = SwiggableHeccer::HeccerNewP2($intermediary->{intermediary});

# build indices for optimization

$heccer->HeccerCompileP2();

# compile to byte code

$heccer->HeccerCompileP3();

# initiate values

$heccer->HeccerInitiate();

# initial dump

print "Initiated\n";

$heccer->HeccerDumpV();

# a couple of times

my $final_report = 0;

foreach (0 .. 9)
{
    # step

    $heccer->HeccerHecc();

    # dump

    print "-------\n";

    print "Iteration $_\n";

    $heccer->HeccerDumpV();
}

if ($final_report)
{
    $heccer->HeccerDumpV();
}


