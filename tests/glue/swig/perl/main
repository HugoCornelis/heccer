#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb -w
#
##
## Heccer : a compartmental solver that implements efficient Crank-Nicolson
## integration for neuronal models.
##

##############################################################################
##'
##' Heccer : testbed C implementation
##'
##' Copyright (C) 2006-2007 Hugo Cornelis
##'
##' functional ideas ..	Hugo Cornelis, hugo.cornelis@gmail.com
##'
##' coding ............	Hugo Cornelis, hugo.cornelis@gmail.com
##'
##############################################################################


use strict;


$| = 1;


BEGIN
{
    # during tests

    push @INC, '../glue/swig/perl';

    # during distcheck

    push @INC, '../../glue/swig/perl';

    # after installation

    push @INC, '/usr/local/glue/swig/perl';
}


$SIG{__DIE__}
    = sub {
	use Carp;

	confess @_;
    };


use Data::Dumper;

use Heccer;


# initialize options

our $config;

$config->{defaults} = { %$Heccer::config, };

my $options
    = Heccer::Options->new
      (
       {
	dBasalActivatorEnd => $config->{settings}->{basal_activator_end} || $config->{defaults}->{basal_activator_end},
	dBasalActivatorStart => $config->{settings}->{basal_activator_start} || $config->{defaults}->{basal_activator_start},
	dIntervalEnd => $config->{settings}->{interval_default_end} || $config->{defaults}->{interval_default_end},
	dIntervalStart => $config->{settings}->{interval_default_start} || $config->{defaults}->{interval_default_start},
	iIntervalEntries => $config->{settings}->{interval_default_entries} || $config->{defaults}->{interval_default_entries},
       },
      );

# instantiate heccer

our $intermediary;

my $heccer
    = Heccer->new
      (
       {
	dStep => $config->{settings}->{time_step} || $config->{defaults}->{time_step},
	intermediary => $intermediary,
	options => $options,
       },
      );

# build indices for optimization, compile to byte code

$heccer->compile();

# initiate values

$heccer->initiate();

# initial dump

print "Initiated\n";

$heccer->dump($config->{settings}->{tested_things} || $config->{defaults}->{tested_things});

# a couple of times

my $final_report = 0;

foreach my $i (0 .. ($config->{settings}->{steps} || $config->{defaults}->{steps}) - 1)
{
    # step

    $heccer->hecc();

    if (($i % ($config->{settings}->{reporting_granularity} || $config->{defaults}->{reporting_granularity})) == 0)
    {
	# dump

	print "-------\n";

	print "Iteration $i\n";

	$heccer->dump($config->{settings}->{tested_things} || $config->{defaults}->{tested_things});
    }
    else
    {
	$final_report = 1;
    }
}

if ($final_report)
{
    print "-------\n";

    print "Iteration " . ($config->{settings}->{steps} || $config->{defaults}->{steps}) . "\n";

    $heccer->dump($config->{settings}->{tested_things} || $config->{defaults}->{tested_things});
}


1;



