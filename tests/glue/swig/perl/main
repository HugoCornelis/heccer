#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb -w
#
##
## Heccer : a compartmental solver that implements efficient Crank-Nicolson
## integration for neuronal models.
##

##############################################################################
##'
##' Heccer : testbed C implementation
##'
##' Copyright (C) 2006-2008 Hugo Cornelis
##'
##' functional ideas ..	Hugo Cornelis, hugo.cornelis@gmail.com
##'
##' coding ............	Hugo Cornelis, hugo.cornelis@gmail.com
##'
##############################################################################


use strict;


$| = 1;


BEGIN
{
    # during tests

    push @INC, '../glue/swig/perl';

    # during distcheck

    push @INC, '../../glue/swig/perl';

    # after installation

    push @INC, '/usr/local/glue/swig/perl';
}


$SIG{__DIE__}
    = sub {
	use Carp;

	confess @_;
    };


use Data::Dumper;

use Heccer;


# initialize options

our $config;

$config->{defaults} = { %$Heccer::config, };

my $options
    = Heccer::Options->new
      (
       {
	dBasalActivatorEnd => $config->{settings}->{basal_activator_end} || $config->{defaults}->{basal_activator_end},
	dBasalActivatorStart => $config->{settings}->{basal_activator_start} || $config->{defaults}->{basal_activator_start},
	dIntervalEnd => $config->{settings}->{interval_default_end} || $config->{defaults}->{interval_default_end},
	dIntervalStart => $config->{settings}->{interval_default_start} || $config->{defaults}->{interval_default_start},
	iIntervalEntries => $config->{settings}->{interval_default_entries} || $config->{defaults}->{interval_default_entries},
       },
      );

# instantiate heccer

my $step = $config->{settings}->{time_step} || $config->{defaults}->{time_step};

our $intermediary;

my $heccer
    = Heccer->new
      (
       {
	configuration => {
			  reporting => {
					granularity => $config->{settings}->{reporting_granularity} || $config->{defaults}->{reporting_granularity},
					tested_things => $config->{settings}->{tested_things} || $config->{defaults}->{tested_things},
				       },
			 },
	dStep => $step,
	intermediary => $intermediary,
	options => $options,
       },
      );

# build indices for optimization, compile to byte code

$heccer->compile();

# initiate values

$heccer->initiate();

# initial dump

$heccer->report( undef, { steps => undef, verbose => 1, }, );

# a couple of times

my $final_report = 0;

foreach my $i (0 .. ($config->{settings}->{steps} || $config->{defaults}->{steps}) - 1)
{
    # update the current simulation time.

    # + 1e-9 needs to be configurable

    my $time = $i * $step + 1e-9;

    # step

    $heccer->hecc($time);

    # report

    $heccer->report( undef, { steps => $i, verbose => 1, }, );
}

# final report

$heccer->report( undef, { steps => -1, verbose => 1, }, );


1;



