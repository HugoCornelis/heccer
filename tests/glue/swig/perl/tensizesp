#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb -w
#
##
## Heccer : a compartmental solver that implements efficient Crank-Nicolson
## integration for neuronal models.
##

##############################################################################
##'
##' Heccer : testbed C implementation
##'
##' Copyright (C) 2006-2007 Hugo Cornelis
##'
##' functional ideas ..	Hugo Cornelis, hugo.cornelis@gmail.com
##'
##' coding ............	Hugo Cornelis, hugo.cornelis@gmail.com
##'
##############################################################################



use strict;


$| = 1;


BEGIN
{
    # during tests

    push @INC, '../glue/swig/perl';

    # during distcheck

    push @INC, '../../glue/swig/perl';

    # after installation

    push @INC, '/usr/local/glue/swig/perl';
}


$SIG{__DIE__}
    = sub {
	use Carp;

	confess @_;
    };


use Data::Dumper;

use Heccer;


# initialize compartments

my $compartments
    = [
       Heccer::Compartment->new
       (
	{
	 dCm => 4.575370291e-11,
	 dEm => -0.08,
	 dInitVm => -0.068,
	 dInject => 1e-8,
	 dRa => 360501.9688,
	 dRm => 358440928,
	 iParent => -1,
	},
       ),
       Heccer::Compartment->new
       (
	{
	 dCm => 5.755329373e-12,
	 dEm => -0.08,
	 dInitVm => -0.068,
	 dInject => 0,
	 dRa => 772813.4375,
	 dRm => 8.548598272e9,
	 iParent => 0,
	},
       ),
       Heccer::Compartment->new
       (
	{
	 dCm => 9.952665428e-12,
	 dEm => -0.08,
	 dInitVm => -0.068,
	 dInject => 0,
	 dRa => 1107083.25,
	 dRm => 4943399424.0,
	 iParent => 1,
	},
       ),
       Heccer::Compartment->new
       (
	{
	 dCm => 3.048169139e-12,
	 dEm => -0.08,
	 dInitVm => -0.068,
	 dInject => 0,
	 dRa => 306646.9688,
	 dRm => 1.614083584e+10,
	 iParent => 2,
	},
       ),
       Heccer::Compartment->new
       (
	{
	 dCm => 1.866796431e-12,
	 dEm => -0.08,
	 dInitVm => -0.068,
	 dInject => 0,
	 dRa => 147150.0781,
	 dRm => 2.635531059e+10,
	 iParent => 3,
	},
       ),
       Heccer::Compartment->new
       (
	{
	 dCm => 3.81543408e-12,
	 dEm => -0.08,
	 dInitVm => -0.068,
	 dInject => 0,
	 dRa => 335501.9375,
	 dRm => 1.289499341e+10,
	 iParent => 4,
	},
       ),
       Heccer::Compartment->new
       (
	{
	 dCm => 2.239454065e-12,
	 dEm => -0.08,
	 dInitVm => -0.068,
	 dInject => 0,
	 dRa => 230128.9531,
	 dRm => 2.196964147e+10,
	 iParent => 5,
	},
       ),
       Heccer::Compartment->new
       (
	{
	 dCm => 1.754059463e-12,
	 dEm => -0.08,
	 dInitVm => -0.068,
	 dInject => 0,
	 dRa => 169781.8594,
	 dRm => 2.804921958e+10,
	 iParent => 6,
	},
       ),
       Heccer::Compartment->new
       (
	{
	 dCm => 3.37096605e-12,
	 dEm => -0.08,
	 dInitVm => -0.068,
	 dInject => 0,
	 dRa => 442254.125,
	 dRm => 1.459522355e+10,
	 iParent => 7,
	},
       ),
       Heccer::Compartment->new
       (
	{
	 dCm => 5.048512389e-12,
	 dEm => -0.08,
	 dInitVm => -0.068,
	 dInject => 0,
	 dRa => 518791.0938,
	 dRm => 9745444864.0,
	 iParent => 8,
	},
       ),
      ];

# initialize intermediary

my $intermediary
    = Heccer::Intermediary->new
      (
       {
	comp2mech => [
		      0,
		      0,
		      0,
		      0,
		      0,
		      0,
		      0,
		      0,
		      0,
		      0,
		      -1,
		     ],
	compartments => $compartments,
	iCompartments => 10,
       },
      );

# initialize options

my $options
    = Heccer::Options->new
      (
       {
	dIntervalStart => -0.1,
	dIntervalEnd => 0.05,
	dBasalActivatorStart => 4e-5,
	dBasalActivatorEnd => 0.3,
	iIntervalEntries => 3000,
       },
      );

# instantiate heccer

my $heccer
    = Heccer->new
      (
       {
	dStep => 2e-5,
	intermediary => $intermediary,
	options => $options,
       },
      );

# build indices for optimization, compile to byte code

$heccer->compile();

# initiate values

$heccer->initiate();

# initial dump

print "Initiated\n";

$heccer->dump();

# a couple of times

my $final_report = 0;

foreach (0 .. 9)
{
    # step

    $heccer->hecc();

    # dump

    print "-------\n";

    print "Iteration $_\n";

    $heccer->dump();
}

if ($final_report)
{
    $heccer->dump();
}


