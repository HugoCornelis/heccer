#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb -w
#
##
## Heccer : a compartmental solver that implements efficient Crank-Nicolson
## integration for neuronal models.
##

##############################################################################
##'
##' Heccer : testbed C implementation
##'
##' Copyright (C) 2006-2007 Hugo Cornelis
##'
##' functional ideas ..	Hugo Cornelis, hugo.cornelis@gmail.com
##'
##' coding ............	Hugo Cornelis, hugo.cornelis@gmail.com
##'
##############################################################################


use strict;


BEGIN
{
    # during tests

    push @INC, '../glue/swig/perl';

    # during distcheck

    push @INC, '../../glue/swig/perl';

    # after installation

    push @INC, '/usr/local/glue/swig/perl';
}


BEGIN
{
    # for main during tests

    push @INC, 'tests/glue/swig/perl';

    # for main during check

    push @INC, './glue/swig/perl';

    # for main during distcheck

    push @INC, '../../tests/glue/swig/perl';
}


$SIG{__DIE__}
    = sub {
	use Carp;

	confess @_;
    };


use Heccer;


# initialize compartments

my $compartments
    = [
       Heccer::Compartment->new
       (
	{
	 dCm => 4.57537e-11,
	 dEm => -0.08,
	 dInitVm => -0.028,
	 dInject => 0,
	 dRa => 360502,
	 dRm => 3.58441e+08,
	},
       ),
      ];

my $channel
    = Heccer::ChannelActivationInactivation->new
      (
       {
	dReversalPotential => 0.1375262439,
	dMaximalConductance => 1.394928884e-08,
	iPool => 1,
	activation => {
		       iPower => 1,
		       gate_concept => {
					dInitActivation => 0.038918706451336625,
					parameters => {
						       forward => {
								   dHHScale => 2.6e3,
								   dHHMult => 0.0,
								   iHHFactorFlag => -1.0,
								   dHHAdd => 1.0,
								   dHHOffset2 => 0.021,
								   dHHTau => -8e-3,
								  },
						       backward => {
								    dHHScale => 0.18e3,
								    dHHMult => 0.0,
								    iHHFactorFlag => -1.0,
								    dHHAdd => 1.0,
								    dHHOffset2 => 0.04,
								    dHHTau => 4e-3,
								   },
						      },
				       },
		      },
	inactivation => {
			 iPower => 1,
			 gate_concept => {
					  dInitActivation => 0.082602128127539254,
					  parameters => {
							 forward => {
								     dHHScale => 0.0025e3,
								     dHHMult => 0.0,
								     iHHFactorFlag => -1.0,
								     dHHAdd => 1.0,
								     dHHOffset2 => 0.04,
								     dHHTau => 8e-3,
								    },
							 backward => {
								      dHHScale => 0.19e3,
								      dHHMult => 0.0,
								      iHHFactorFlag => -1.0,
								      dHHAdd => 1.0,
								      dHHOffset2 => 0.05,
								      dHHTau => -10.0e-3,
								     },
							},
					 },
			},
       },
      );

my $pool
    = Heccer::ExponentialDecay->new
      (
       {
	dInitValue => 4e-5,
	dBeta => 9412391936.0,
	dSteadyState => 4e-05,
	dTau => 0.00010,
	piExternal => [
		       0,
		      ],
       },
      );

# initialize the math component array

my $math_components
    = [
       $channel,
       $pool,
      ];

# initialize intermediary

our $intermediary
    = Heccer::Intermediary->new
      (
       {
	comp2mech => [ 2, -1],
	compartments => $compartments,
	iCompartments => 1,
	math_components => $math_components,
       },
      );


our $config
    = {
       settings => {
		    reporting_granularity => 100,
		    steps => 1000,
		    tested_things =>  (
				       $SwiggableHeccer::HECCER_DUMP_VM_COMPARTMENT_MATRIX
					| $SwiggableHeccer::HECCER_DUMP_VM_COMPARTMENT_DATA
					| $SwiggableHeccer::HECCER_DUMP_VM_COMPARTMENT_OPERATIONS
					| $SwiggableHeccer::HECCER_DUMP_VM_MECHANISM_DATA
					| $SwiggableHeccer::HECCER_DUMP_VM_MECHANISM_OPERATIONS
					| $SwiggableHeccer::HECCER_DUMP_VM_SUMMARY
				      ),
		    time_step => (2e-5),
		   },
      };


require 'main';


