#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb -w
#
##
## Heccer : a compartmental solver that implements efficient Crank-Nicolson
## integration for neuronal models.
##

##############################################################################
##'
##' Heccer : testbed C implementation
##'
##' Copyright (C) 2006-2007 Hugo Cornelis
##'
##' functional ideas ..	Hugo Cornelis, hugo.cornelis@gmail.com
##'
##' coding ............	Hugo Cornelis, hugo.cornelis@gmail.com
##'
##############################################################################


use strict;


BEGIN
{
    # during tests

    push @INC, '../glue/swig/perl';

    # during distcheck

    push @INC, '../../glue/swig/perl';

    # after installation

    push @INC, '/usr/local/glue/swig/perl';
}


BEGIN
{
    # for main during tests

    push @INC, './glue/swig/perl';

    # for main during distcheck

    push @INC, '../../tests/glue/swig/perl';
}


use Heccer;


# initialize compartments

my $compartments
    = [
       {
	dCm => 4.57537e-11,
	dEm => -0.08,
	dInitVm => -0.068,
	dInject => 0,
	dRa => 360502,
	dRm => 3.58441e+08,
	iParent => -1,
       },
       {
	dCm => 4.57537e-11,
	dEm => -0.08,
	dInitVm => -0.068,
	dInject => 0,
	dRa => 360502,
	dRm => 3.58441e+08,
	iParent => 0,
       },
      ];

# initialize intermediary

our $intermediary
    = Heccer::Intermediary->new
      (
       {
	comp2mech => [ 0, 0, -1],
	compartments => $compartments,
	iCompartments => 2,
       },
      );


require 'main';


