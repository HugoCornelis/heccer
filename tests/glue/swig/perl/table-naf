#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb -w
#
##
## Heccer : a compartmental solver that implements efficient Crank-Nicolson
## integration for neuronal models.
##

##############################################################################
##'
##' Heccer : testbed C implementation
##'
##' Copyright (C) 2006-2008 Hugo Cornelis
##'
##' functional ideas ..	Hugo Cornelis, hugo.cornelis@gmail.com
##'
##' coding ............	Hugo Cornelis, hugo.cornelis@gmail.com
##'
##############################################################################


use strict;


BEGIN
{
    # during tests

    push @INC, '../glue/swig/perl';

    # during distcheck

    push @INC, '../../glue/swig/perl';

    # after installation

    push @INC, '/usr/local/glue/swig/perl';
}


BEGIN
{
    # for main during tests

    push @INC, 'tests/glue/swig/perl';

    # for main during check

    push @INC, './glue/swig/perl';

    # for main during distcheck

    push @INC, '../../tests/glue/swig/perl';
}


use Heccer;


# initialize compartments

my $compartments
    = [
       Heccer::Compartment->new
       (
	{
	 dCm => 4.57537e-11,
	 dEm => -0.08,
	 dInitVm => -0.068,
	 dInject => 0,
	 dRa => 360502,
	 dRm => 3.58441e+08,
	},
       ),
      ];

my $channel
    = Heccer::ChannelActivationInactivation->new
      (
       {
	dReversalPotential => 0.045,
	dMaximalConductance => 0.0002092393115,
	activation => {
		       iPower => 3,
		       gate_concept => {
					dInitActivation => 0.0078406449371415214,
					parameters => {
						       A => {
							     dHHAddNum => 35.0e3,
							     dHHMult => 0.0,
							     iHHFactorFlag => -1.0,
							     dHHAddDen => 0.0,
							     dHHOffsetE => 5.0e-3,
							     dHHDivE => -10.0e-3,
							    },
						       B => {
							     dHHAddNum => 7.0e3,
							     dHHMult => 0.0,
							     iHHFactorFlag => -1.0,
							     dHHAddDen => 0.0,
							     dHHOffsetE => 65.0e-3,
							     dHHDivE => 20.0e-3,
							    },
						      },
				       },
		      },
	inactivation => {
			 iPower => 1,
			 gate_concept => {
					  dInitActivation => 0.26397776926502026,
					  parameters => {
							 A => {
							       dHHAddNum => 0.225e3,
							       dHHMult => 0.0,
							       iHHFactorFlag => -1.0,
							       dHHAddDen => 1.0,
							       dHHOffsetE => 80.0e-3,
							       dHHDivE => 10.0e-3,
							      },
							 B => {
							       dHHAddNum => 7.5e3,
							       dHHMult => 0.0,
							       iHHFactorFlag => -1.0,
							       dHHAddDen => 0.0,
							       dHHOffsetE => -3.0e-3,
							       dHHDivE => -18.0e-3,
							      },
							},
					 },
			},
       },
      );

# initialize the math component array

my $math_components
    = [
       $channel,
      ];

# initialize intermediary

our $intermediary
    = Heccer::Intermediary->new
      (
       {
	comp2mech => [ 1, -1],
	compartments => $compartments,
	iCompartments => 1,
	math_components => $math_components,
       },
      );


our $config
    = {
       settings => {
		    interval_default_end => (0.05),
		    interval_default_entries => 50,
		    interval_default_start => (-0.1),
		    steps => 1,
		    tested_things => ($SwiggableHeccer::HECCER_DUMP_TABLE_GATE_TABLES
				      | $SwiggableHeccer::HECCER_DUMP_TABLE_GATE_SUMMARY
				      | $SwiggableHeccer::HECCER_DUMP_VM_MECHANISM_DATA
				      | $SwiggableHeccer::HECCER_DUMP_INTERMEDIARY_SUMMARY
				      | $SwiggableHeccer::HECCER_DUMP_INTERMEDIARY_STRUCTURE
				      | $SwiggableHeccer::HECCER_DUMP_INTERMEDIARY_COMPARTMENTS_PARAMETERS
				      | $SwiggableHeccer::HECCER_DUMP_INDEXERS_SUMMARY
				      | $SwiggableHeccer::HECCER_DUMP_INDEXERS_STRUCTURE
				      | $SwiggableHeccer::HECCER_DUMP_VM_MECHANISM_OPERATIONS
				      | $SwiggableHeccer::HECCER_DUMP_VM_COMPARTMENT_MATRIX_DIAGONALS
				      | $SwiggableHeccer::HECCER_DUMP_VM_COMPARTMENT_MATRIX
				      | $SwiggableHeccer::HECCER_DUMP_VM_AGGREGATORS
				      | $SwiggableHeccer::HECCER_DUMP_VM_COMPARTMENT_OPERATIONS),
		   },
      };


require 'main';


