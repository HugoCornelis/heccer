#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb
#
#
# Generate a release
#

use strict;


use YAML ();


# get the major release name

my $major = $ARGV[0] || '';

#! major mandatory

if ($major eq '')
{
    die "$0: need a release name";
}

# get the minor release name

my $minor = $ARGV[1] || '';

# get the micro release name

my $micro = $ARGV[2] || '';

# check if there are any differences

my $inventory = [ map { chomp ; $_ } `mtn automate inventory` ];

#! see http://www.venge.net/monotone/docs/Automation.html#Automation, inventory command

my $missing = [ grep { /^  M/ } @$inventory ];

#! added or (added and patched)

my $added = [ grep { /^ A./ } @$inventory ];

my $dropped = [ grep { /^D  / } @$inventory ];

my $renamed_from = [ grep { /^R  / } @$inventory ];

my $renamed_to = [ grep { /^ R/ } @$inventory ];

my $patched = [ grep { /^  P/ } @$inventory ];

my $unchanged = [ grep { /^   / } @$inventory ];

my $unknown = [ grep { /^  U/ } @$inventory ];

my $ignored = [ grep { /^  I/ } @$inventory ];

if (@$missing
    || @$added
    || @$dropped
    || @$renamed_from
    || @$renamed_to
    || @$patched
    || @$unknown)
{
    die "$0: found uncommitted differences in this workspace, aborting";
}

# read the release database

my $package = YAML::LoadFile("package.yml");

# get releases

my $releases = $package->{releases} || {};

# if minor needs increment

if ($minor eq '+')
{
    # get a next minor for this major

    my $minors
	= [
	   sort
	   {
	       $a <=> $b
	   }
	   keys %{$releases->{$major}},
	  ];

    my $next_minor;

    if (!@$minors)
    {
	$next_minor = 1;
    }
    else
    {
	$next_minor = $minors->[$#$minors] + 1;
    }

    $minor = $next_minor;
}

# if micro needs increment

if ($micro eq '+')
{
    # get a next micro for this minor

    my $micros
	= [
	   sort
	   {
	       $a <=> $b
	   }
	   keys %{$releases->{$major}->{$minor}},
	  ];

    my $next_micro;

    if (!@$micros)
    {
	$next_micro = 1;
    }
    else
    {
	$next_micro = $micros->[$#$micros] + 1;
    }

    $micro = $next_micro;
}

# construct a new record

my $email = $package->{package}->{maintainer};

my $record
    = {
       email => $email,
       major => $major,
       micro => $micro,
       minor => $minor,
      };

# generate the human readable label

my $label = "$major-$minor-$micro";

if ($label !~ /^[a-zA-Z0-9_\-\.]+$/)
{
    die "$0: this release has an illegal label ($label), aborting";
}

#! protect against empty minors and micros

$label =~ s/--/-/g;
$label =~ s/-$//g;

# add the record

if (exists $releases->{$major}->{$minor}->{$micro})
{
    die "$0: this release ($label) is already in the release database";
}

$releases->{$major}->{$minor}->{$micro} = $record;

# link the new releases with the database

#! if there were no releases yet, $package and $releases are not
#! linked yet.

$package->{releases} = $releases;

# dump the new database

YAML::DumpFile("package.yml", $package);

# replace the release names in configure.ac.

$email = quotemeta $email;

system "find . -name configure.ac -exec perl -pi -e 's/AC_INIT\\(.*?\\)/AC_INIT($package->{package}->{name}, $label, $email)/' \{\} \\;";

system "find . -name configure.ac -exec perl -pi -e 's/AM_INIT_AUTOMAKE\\(.*?\\)/AM_INIT_AUTOMAKE($package->{package}->{name}, $label)/' \{\} \\;";

# put this release in the repository

system "mtn ci --message=\"$0: automated release with name ($label)\"";

if ($?)
{
    die "$0: commiting release database for $label failed";
}

# put a tag

my $current = `mtn automate get_base_revision_id`;

system "mtn tag $current \"$label\"";

if ($?)
{
    die "$0: failed to add a tag to the release made ($label).";
}

