-*- outline -*-

* table index addressing
Results are cast from int to void * back to int.  I guess that some of
the functions are doing to much work, ie. there is not a clean
separation of concerns.

* compilation of outputs
truncates output files, perhaps that should be moved to the initiation
sequence ?  Would be handy if starting the studio from ssp, output
files would not be truncated.

* add double exp. for ca pools
See chat with Paolo.

* comparison project
** from previous G2 based tutorial
This is compartment /Purkinje/p0b2b2b1[21](dia:1.020000013e-06,len:3.908517556e-06)
This is compartment /Purkinje/p0b2b2b1b1[3](dia:8.70000008e-07,len:3.5061787e-06)
This is compartment /Purkinje/p0b2b2b1b2[4](dia:1.020000013e-06,len:3.171656999e-06)
** colormap file colormaps/TurtlePC2_020105_soma_pclamp.yml
'/TurtlePC2_020105/segments/p0b2b2b1b1[0]': -0.0625251
'/TurtlePC2_020105/segments/p0b2b2b1b1[10]': -0.0488724

* test config
get_current_revision_id is being used, but that gives an wrong
revision id on an unchanged workspace, or I cannot figure out what it
is doing.

* running tests
The tests sometimes rely on the output file /tmp/output, which
sometimes can be owned by a foriegn user.  So the tests fail.  These
tests are suspect:

  active_multiple.t:
    1:
      error: 3:Child PID 5511 exited with status 65280
      small subset of the purkinje cell model:
        description: Is a small subset of the purkinje cell model solved correctly ?
    2:
      error: 3:Child PID 5512 exited with status 65280
      'small subset of the purkinje cell model, passive-only mode':
        description: 'Is a small subset of the purkinje cell model solved correctly, passive-only mode ?'
  hh.t:
    3:
      error: 3:Child PID 5513 exited with status 65280
      single compartment with regular HH channels:
        description: Is a single compartment with regular HH channels solved correctly ?
  perfectclamp.t:
    4:
      error: 3:Child PID 5528 exited with status 65280
      'perfect clamp on the full purkinje model, constant command voltage':
        description: Can we do a perfect clamp on the full purkinje cell model using a constant command voltage ?
    5:
      error: 3:Child PID 5530 exited with status 65280
      perfect clamp on the full purkinje model using a file with command voltages:
        description: Can we do a perfect clamp on the full purkinje cell model using a file with command voltages ?
  pools.t:
    6:
      error: 2:EOF
      'pool integration, one compartment, one pool with a feedback loop':
        description: 'Is a pool integrated correctly, one compartment, one pool with a feedback loop ?'
    7:
      error: 2:EOF
      'pool integration, one pool, two feeding channels':
        description: 'Is a pool integrated correctly, one pool, two feeding channels ?'
    8:
      error: 2:EOF
      solved nernst potential application for channel reversal potentials:
        description: Is the solved nernst potential applied for channel reversal potentials ?
  purkinje.t:
    10:
      error: 3:Child PID 5541 exited with status 65280
      'full purkinje model, soma current injection':
        description: 'Is the full purkinje cell model behaviour ok, soma current injection ?'
    11:
      error: 2:EOF
      purkinje undocumented axon segment:
        description: Is the undocumented purkinje axon solved correctly ?
    9:
      error: 3:Child PID 5539 exited with status 65280
      'full purkinje model, synchans endogenous firing':
        description: 'Is the full purkinje cell model behaviour ok, synchans endogenous firing (works only with the ran1() rng) ?'
  synaptic.t:
    12:
      error: 2:EOF
      'synaptic (springmass) channel integration, with an event table':
        description: Is a synaptic (springmass) channel with an event table integrated correctly ?
    13:
      error: 2:EOF
      'synaptic (springmass) channel integration, with an event table, passive-only mode':
        description: 'Is a synaptic (springmass) channel with an event table integrated correctly, passive-only mode ?'


* running tests
'--regex perl' gives results that are inconsistent with 'make check'.

* HeccerHecc()
should have access to the current simulation time, now this is
implied.

* addressing, output generator and vclamp
Variables should be (double *) instead of (void *).

* passive-only option
** open issues
probably both of these, for interfacing consistency:
*** should be at level of the integrator ?
So mechanisms never propagate to the intermediary ?
*** should be at the level of the compiler ?
So mechanisms are filtered out by the compilers ?
**** in HeccerMechanismCompile()
All the mechanisms, except springmass are skipped.  This is supposed
to be tracked automatically by the mechanism indexing, so should work
like that.
** implement tests for the passive-only option

* some tests don't work on ric-neurospaces-02
check files heccer-tables.output and heccer-spikes.output.  Perhaps
related to not recompiling heccer and integrating the proper
neurospaces library.

* running tests on a user machine
requires mtn installed, because the test.config tries to execute mtn.

* the tests/tests directory is part of the distribution, somehow.

* add springmass channels to the perl glue
** add events
** add springmass2 test
based on the springmass4 test
check if the same test output can be used.

* solve the heccer/neurospaces dependencies that Mike Schachter reported.

* add the mtn revision to the dist, somehow.

* the output of the tests sometimes goes to /tmp/output
Must be a unique filename due to ownership.  New users cannot remove
the file when it is owned by a different user.
       #include <stdio.h>
       char *tmpnam(char *s);
and write the name of the generated filename to the test output in
case needed.

* neurospaces interface
has fixed size buffers, see two commits ago.  Remove fixed size buffers.

* rename integrators to interfaces

* the website takes more than 100MB.

* Perhaps I should drand48() for Linux rng
Is declared obsoleted, see man page.

* Before compilation
Check if a time step has been set, if it is zero, abort.

* SETMAT_FLUXPOOL initial value
Because ->iPool is only used as a boolean indicator, we can replace it
with ->dInitFlux, with a value of FLT_MAX meaning no flux must be
calculated.

* internal state serializer
** serializes the complete internal state
** can be used from SSP, to save the full state of a model
** files can be reloaded by a stand-alone heccer for debugging
** depending on options, only serializes the model state
and not the model structure.

* integrators
rename to 'interfaces', to stress the loose coupling.
** Heccer.pm mentions 'intergrator plugin'
Needs to be adapted.

* addressing
Last mechanism can not have more than one output, see addressing.c
TODO developer comments.

* perl glue
comp2mech entry should default to -1 terminated array of all zeros,
when there are no mechanisms.

* intermediary concy checker
** number of entries in comp2mech
** values of comp2mech entries

* configure
Check for the neurospaces.h file, then set the variable to compile the
neurospaces integrator (or not).

* Revisit the compartments mops and mats
Needs update of all tests (also in ssp).
** mats: inject
** mops: all the others

* Revisit the channel definitions to generalize
The members of the channel structures should be more easily
understandable, and, as far as possible, be shared between the
different definitions, such that the procedures below, and their
associated data structures (in mechanism.h) have one common worker
algorithm.
** HeccerBasalActivatorTabulate
** HeccerChannelPersistentSteadyStateDualTauTabulate
** HeccerChannelPersistentSteadyStateTauTabulate
** HeccerChannelSteadyStateSteppedTauTabulate
** HeccerDiscretizeBasalActivator
** HeccerDiscretizeGateConcept
** HeccerGateConceptTabulate

* ChannelSteadyStateSteppedTau
** check if members have correct names
According to the Genesis documentation, the time constant comes from
the first table, the steady state from the second.

* swig interface
** implement callouts
#t callbacks and swig are still a problem, solutions for python seem
#t more easy that for perl.
#t see http://search.cpan.org/src/JHPB/X11-Wcl-0.3/examples/


