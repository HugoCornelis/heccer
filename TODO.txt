-*- outline -*-

* Perhaps I should drand48() for Linux rng
Is declared obsoleted, see man page.

* Before compilation
Check if a time step has been set, if it is zero, abort.

* SETMAT_FLUXPOOL initial value
Because ->iPool is only used as a boolean indicator, we can replace it
with ->dInitFlux, with a value of FLT_MAX meaning no flux must be
calculated.

* internal state serializer
** serializes the complete internal state
** can be used from SSP, to save the full state of a model
** files can be reloaded by a stand-alone heccer for debugging
** depending on options, only serializes the model state
and not the model structure.

* integrators
rename to 'interfaces', to stress the loose coupling.
** Heccer.pm mentions 'intergrator plugin'
Needs to be adapted.

* addressing
Last mechanism can not have more than one output, see addressing.c
TODO developer comments.

* perl glue
comp2mech entry should default to -1 terminated array of all zeros,
when there are no mechanisms.

* intermediary concy checker
** number of entries in comp2mech
** values of comp2mech entries

* configure
Check for the neurospaces.h file, then set the variable to compile the
neurospaces integrator (or not).

* Revisit the compartments mops and mats
Needs update of all tests (also in ssp).
** mats: inject
** mops: all the others

* Revisit the channel definitions to generalize
The members of the channel structures should be more easily
understandable, and, as far as possible, be shared between the
different definitions, such that the procedures below, and their
associated data structures (in mechanism.h) have one common worker
algorithm.
** HeccerBasalActivatorTabulate
** HeccerChannelPersistentSteadyStateDualTauTabulate
** HeccerChannelPersistentSteadyStateTauTabulate
** HeccerChannelSteadyStateSteppedTauTabulate
** HeccerDiscretizeBasalActivator
** HeccerDiscretizeGateConcept
** HeccerGateConceptTabulate

* ChannelSteadyStateSteppedTau
** check if members have correct names
According to the Genesis documentation, the time constant comes from
the first table, the steady state from the second.

* swig interface
** implement callouts
#t callbacks and swig are still a problem, solutions for python seem
#t more easy that for perl.
#t see http://search.cpan.org/src/JHPB/X11-Wcl-0.3/examples/


